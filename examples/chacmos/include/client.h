/*************************************************************
 * DO NOT EDIT! - MACHINE-GENERATED FILE!
 *
 * generated by idl4
 * report bugs to haeberlen@ira.uka.de
 *************************************************************/

/*************************************************************
 * the standard header includes for macros
 *************************************************************/

#ifndef __client_h__
#define __client_h__

#include "idl4.h"

/************************************************************
 * Library: chacmOS
 */

__inline__ extern sdword generic_implements(sdword __service, sdword objID, sdword list_size, sdword *interface_list)

{
  sdword __return;

  // [straight] sdword objID, sdword list_size, sdword *interface_list
  // [in] sdword objID, sdword list_size
  // [onstack] sdword *interface_list, sdword objID, sdword list_size
  // [str,in] sdword *interface_list
  // [push] , sdword objID, sdword list_size
  // [pop] 

  int dummy;

  asm volatile ( "sub    $8, %esp		\n\t");
  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)interface_list));
  asm volatile ( "pushl  %0			\n\t" : : "g" (list_size));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x6100			\n\t"
                 "pushl	$0x4000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x0, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$40, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (list_size), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword directory_resolve(sdword __service, sdword objID, sdword size, char *name, sdword *dsvrID, sdword *dobjID)

{
  sdword __return;

  // [straight] sdword objID, sdword size, char *name, sdword *dsvrID, sdword *dobjID
  // [in] sdword objID, sdword size
  // [out] sdword *dsvrID, sdword *dobjID
  // [onstack] char *name, sdword *dobjID, sdword *dsvrID, sdword objID, sdword size
  // [str,in] char *name
  // [push] , sdword objID, sdword size
  // [pop] , sdword *dsvrID, sdword *dobjID

  int dummy;

  asm volatile ( "sub    $8, %esp		\n\t");
  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)name));
  asm volatile ( "pushl  %0			\n\t" : : "g" (size));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x6100			\n\t"
                 "pushl	$0x4000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x10000, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$40, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*dsvrID), "=D" (*dobjID)
                 : "S" (__service), "D" (size), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword directory_link(sdword __service, sdword objID, sdword size, char *name, sdword dsvrID, sdword dobjID)

{
  sdword __return;

  // [straight] sdword objID, sdword size, char *name, sdword dsvrID, sdword dobjID
  // [in] sdword objID, sdword size, sdword dsvrID, sdword dobjID
  // [onstack] char *name, sdword objID, sdword size, sdword dsvrID, sdword dobjID
  // [str,in] char *name
  // [push] , sdword objID, sdword size, sdword dsvrID, sdword dobjID
  // [pop] 

  int dummy;

  asm volatile ( "sub    $8, %esp		\n\t");
  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)name));
  asm volatile ( "pushl  %0			\n\t" : : "g" (size));

  asm volatile ( "pushl  %0			\n\t" : : "g" (dobjID));
  asm volatile ( "pushl  %0			\n\t" : : "g" (dsvrID));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0xA100			\n\t"
                 "pushl	$0x8000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x10001, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$48, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (size), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword directory_unlink(sdword __service, sdword objID, sdword size, char *name)

{
  sdword __return;

  // [straight] sdword objID, sdword size, char *name
  // [in] sdword objID, sdword size
  // [onstack] char *name, sdword objID, sdword size
  // [str,in] char *name
  // [push] , sdword objID, sdword size
  // [pop] 

  int dummy;

  asm volatile ( "sub    $8, %esp		\n\t");
  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)name));
  asm volatile ( "pushl  %0			\n\t" : : "g" (size));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x6100			\n\t"
                 "pushl	$0x4000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x10002, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$40, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (size), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword creator_can_create(sdword __service, sdword objID, sdword list_size, sdword *interface_list)

{
  sdword __return;

  // [straight] sdword objID, sdword list_size, sdword *interface_list
  // [in] sdword objID, sdword list_size
  // [onstack] sdword *interface_list, sdword objID, sdword list_size
  // [str,in] sdword *interface_list
  // [push] , sdword objID, sdword list_size
  // [pop] 

  int dummy;

  asm volatile ( "sub    $8, %esp		\n\t");
  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)interface_list));
  asm volatile ( "pushl  %0			\n\t" : : "g" (list_size));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x6100			\n\t"
                 "pushl	$0x4000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x20000, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$40, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (list_size), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword creator_create(sdword __service, sdword objID, sdword list_size, sdword *interface_list, sdword *dsvrID, sdword *dobjID)

{
  sdword __return;

  // [straight] sdword objID, sdword list_size, sdword *interface_list, sdword *dsvrID, sdword *dobjID
  // [in] sdword objID, sdword list_size
  // [out] sdword *dsvrID, sdword *dobjID
  // [onstack] sdword *interface_list, sdword *dobjID, sdword *dsvrID, sdword objID, sdword list_size
  // [str,in] sdword *interface_list
  // [push] , sdword objID, sdword list_size
  // [pop] , sdword *dsvrID, sdword *dobjID

  int dummy;

  asm volatile ( "sub    $8, %esp		\n\t");
  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)interface_list));
  asm volatile ( "pushl  %0			\n\t" : : "g" (list_size));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x6100			\n\t"
                 "pushl	$0x4000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x20001, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$40, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*dsvrID), "=D" (*dobjID)
                 : "S" (__service), "D" (list_size), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword file_open(sdword __service, sdword objID, sdword mode)

{
  sdword __return;

  // [straight] sdword objID, sdword mode
  // [in] sdword objID, sdword mode
  // [onstack] sdword objID, sdword mode
  // [push] , sdword objID, sdword mode
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x30000, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (mode), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword file_close(sdword __service, sdword objID)

{
  sdword __return;

  // [straight] sdword objID
  // [in] sdword objID
  // [onstack] sdword objID
  // [push] , sdword objID
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x30001, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword file_read(sdword __service, sdword objID, sdword length, sdword *size, char **data)

{
  sdword __return;

  // [straight] sdword objID, sdword length, sdword *size, char **data
  // [in] sdword objID, sdword length
  // [out] sdword *size
  // [onstack] char **data, sdword *size, sdword objID, sdword length
  // [str,out] char **data
  // [push] , sdword objID, sdword length
  // [pop] , sdword *size

  int dummy;

  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)(*data)));
  asm volatile ( "pushl  %0			\n\t" : : "g" (*size));
  asm volatile ( "sub    $8, %esp		\n\t");

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x6000			\n\t"
                 "pushl	$0x4100			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "mov	%%eax, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x30002, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$40, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*size), "=D" (dummy)
                 : "S" (__service), "D" (length), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword file_write(sdword __service, sdword objID, sdword length, sdword size, char *data)

{
  sdword __return;

  // [straight] sdword objID, sdword length, sdword size, char *data
  // [in] sdword objID, sdword length, sdword size
  // [onstack] char *data, sdword objID, sdword length, sdword size
  // [str,in] char *data
  // [push] , sdword objID, sdword length, sdword size
  // [pop] 

  int dummy;

  asm volatile ( "sub    $8, %esp		\n\t");
  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)data));
  asm volatile ( "pushl  %0			\n\t" : : "g" (size));

  asm volatile ( "pushl  %0			\n\t" : : "g" (size));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x8100			\n\t"
                 "pushl	$0x6000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x30003, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$44, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (length), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword file_seek(sdword __service, sdword objID, sdword pos)

{
  sdword __return;

  // [straight] sdword objID, sdword pos
  // [in] sdword objID, sdword pos
  // [onstack] sdword objID, sdword pos
  // [push] , sdword objID, sdword pos
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x30004, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (pos), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword file_tell(sdword __service, sdword objID, sdword *pos)

{
  sdword __return;

  // [straight] sdword objID, sdword *pos
  // [in] sdword objID
  // [out] sdword *pos
  // [onstack] sdword *pos, sdword objID
  // [push] , sdword objID
  // [pop] , sdword *pos

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x30005, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*pos), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword file_delete(sdword __service, sdword objID)

{
  sdword __return;

  // [straight] sdword objID
  // [in] sdword objID
  // [onstack] sdword objID
  // [push] , sdword objID
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x30006, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword task_set_cmdline(sdword __service, sdword objID, sdword size, char *cmdline)

{
  sdword __return;

  // [straight] sdword objID, sdword size, char *cmdline
  // [in] sdword objID, sdword size
  // [onstack] char *cmdline, sdword objID, sdword size
  // [str,in] char *cmdline
  // [push] , sdword objID, sdword size
  // [pop] 

  int dummy;

  asm volatile ( "sub    $8, %esp		\n\t");
  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)cmdline));
  asm volatile ( "pushl  %0			\n\t" : : "g" (size));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x6100			\n\t"
                 "pushl	$0x4000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x40000, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$40, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (size), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword task_set_root(sdword __service, sdword objID, sdword dsvrID, sdword dobjID)

{
  sdword __return;

  // [straight] sdword objID, sdword dsvrID, sdword dobjID
  // [in] sdword objID, sdword dsvrID, sdword dobjID
  // [onstack] sdword objID, sdword dsvrID, sdword dobjID
  // [push] , sdword objID, sdword dsvrID, sdword dobjID
  // [pop] 

  int dummy;

  asm volatile ( "pushl  %0			\n\t" : : "g" (dobjID));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x8000			\n\t"
                 "pushl	$0x6000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x40001, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$28, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (dsvrID), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword task_set_memory(sdword __service, sdword objID, sdword psvrID, sdword pobjID)

{
  sdword __return;

  // [straight] sdword objID, sdword psvrID, sdword pobjID
  // [in] sdword objID, sdword psvrID, sdword pobjID
  // [onstack] sdword objID, sdword psvrID, sdword pobjID
  // [push] , sdword objID, sdword psvrID, sdword pobjID
  // [pop] 

  int dummy;

  asm volatile ( "pushl  %0			\n\t" : : "g" (pobjID));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x8000			\n\t"
                 "pushl	$0x6000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x40002, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$28, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (psvrID), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword task_execute(sdword __service, sdword objID, sdword fsvrID, sdword fobjID)

{
  sdword __return;

  // [straight] sdword objID, sdword fsvrID, sdword fobjID
  // [in] sdword objID, sdword fsvrID, sdword fobjID
  // [onstack] sdword objID, sdword fsvrID, sdword fobjID
  // [push] , sdword objID, sdword fsvrID, sdword fobjID
  // [pop] 

  int dummy;

  asm volatile ( "pushl  %0			\n\t" : : "g" (fobjID));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x8000			\n\t"
                 "pushl	$0x6000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x40003, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$28, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (fsvrID), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword task_kill(sdword __service, sdword objID)

{
  sdword __return;

  // [straight] sdword objID
  // [in] sdword objID
  // [onstack] sdword objID
  // [push] , sdword objID
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x40004, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword task_get_cmdline(sdword __service, sdword objID, sdword *size, char **cmdline)

{
  sdword __return;

  // [straight] sdword objID, sdword *size, char **cmdline
  // [in] sdword objID
  // [out] sdword *size
  // [onstack] char **cmdline, sdword *size, sdword objID
  // [str,out] char **cmdline
  // [push] , sdword objID
  // [pop] , sdword *size

  int dummy;

  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)(*cmdline)));
  asm volatile ( "pushl  %0			\n\t" : : "g" (*size));
  asm volatile ( "sub    $8, %esp		\n\t");

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x4000			\n\t"
                 "pushl	$0x4100			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "mov	%%eax, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x40005, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$40, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*size), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword task_get_root(sdword __service, sdword objID, sdword *dsvrID, sdword *dobjID)

{
  sdword __return;

  // [straight] sdword objID, sdword *dsvrID, sdword *dobjID
  // [in] sdword objID
  // [out] sdword *dsvrID, sdword *dobjID
  // [onstack] sdword *dobjID, sdword *dsvrID, sdword objID
  // [push] , sdword objID
  // [pop] , sdword *dsvrID, sdword *dobjID

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x40006, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*dsvrID), "=D" (*dobjID)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword task_get_threadid(sdword __service, sdword objID, sdword *threadID)

{
  sdword __return;

  // [straight] sdword objID, sdword *threadID
  // [in] sdword objID
  // [out] sdword *threadID
  // [onstack] sdword *threadID, sdword objID
  // [push] , sdword objID
  // [pop] , sdword *threadID

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x40007, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*threadID), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword task_get_memory(sdword __service, sdword objID, sdword *psvrID, sdword *pobjID)

{
  sdword __return;

  // [straight] sdword objID, sdword *psvrID, sdword *pobjID
  // [in] sdword objID
  // [out] sdword *psvrID, sdword *pobjID
  // [onstack] sdword *pobjID, sdword *psvrID, sdword objID
  // [push] , sdword objID
  // [pop] , sdword *psvrID, sdword *pobjID

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x40008, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*psvrID), "=D" (*pobjID)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword block_get_capacity(sdword __service, sdword objID, sdword *blockcnt)

{
  sdword __return;

  // [straight] sdword objID, sdword *blockcnt
  // [in] sdword objID
  // [out] sdword *blockcnt
  // [onstack] sdword *blockcnt, sdword objID
  // [push] , sdword objID
  // [pop] , sdword *blockcnt

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x50000, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*blockcnt), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword block_set_capacity(sdword __service, sdword objID, sdword blockcnt)

{
  sdword __return;

  // [straight] sdword objID, sdword blockcnt
  // [in] sdword objID, sdword blockcnt
  // [onstack] sdword objID, sdword blockcnt
  // [push] , sdword objID, sdword blockcnt
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x50001, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (blockcnt), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword block_get_blocksize(sdword __service, sdword objID, sdword *size)

{
  sdword __return;

  // [straight] sdword objID, sdword *size
  // [in] sdword objID
  // [out] sdword *size
  // [onstack] sdword *size, sdword objID
  // [push] , sdword objID
  // [pop] , sdword *size

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x50002, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*size), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword block_read(sdword __service, sdword objID, sdword blocknr, sdword count, sdword *size, char **data)

{
  sdword __return;

  // [straight] sdword objID, sdword blocknr, sdword count, sdword *size, char **data
  // [in] sdword objID, sdword blocknr, sdword count
  // [out] sdword *size
  // [onstack] char **data, sdword *size, sdword objID, sdword blocknr, sdword count
  // [str,out] char **data
  // [push] , sdword objID, sdword blocknr, sdword count
  // [pop] , sdword *size

  int dummy;

  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)(*data)));
  asm volatile ( "pushl  %0			\n\t" : : "g" (*size));
  asm volatile ( "sub    $8, %esp		\n\t");

  asm volatile ( "pushl  %0			\n\t" : : "g" (count));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x8000			\n\t"
                 "pushl	$0x6100			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "mov	%%eax, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x50003, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$44, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*size), "=D" (dummy)
                 : "S" (__service), "D" (blocknr), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword block_write(sdword __service, sdword objID, sdword blocknr, sdword count, sdword size, char *data)

{
  sdword __return;

  // [straight] sdword objID, sdword blocknr, sdword count, sdword size, char *data
  // [in] sdword objID, sdword blocknr, sdword count, sdword size
  // [onstack] char *data, sdword objID, sdword blocknr, sdword count, sdword size
  // [str,in] char *data
  // [push] , sdword objID, sdword blocknr, sdword count, sdword size
  // [pop] 

  int dummy;

  asm volatile ( "sub    $8, %esp		\n\t");
  asm volatile ( "pushl  %0			\n\t" : : "g" ((int)data));
  asm volatile ( "pushl  %0			\n\t" : : "g" (size));

  asm volatile ( "pushl  %0			\n\t" : : "g" (size));
  asm volatile ( "pushl  %0			\n\t" : : "g" (count));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0xA100			\n\t"
                 "pushl	$0x8000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x50004, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$48, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (blocknr), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword filesystem_mount(sdword __service, sdword objID, sdword msvrID, sdword mobjID)

{
  sdword __return;

  // [straight] sdword objID, sdword msvrID, sdword mobjID
  // [in] sdword objID, sdword msvrID, sdword mobjID
  // [onstack] sdword objID, sdword msvrID, sdword mobjID
  // [push] , sdword objID, sdword msvrID, sdword mobjID
  // [pop] 

  int dummy;

  asm volatile ( "pushl  %0			\n\t" : : "g" (mobjID));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x8000			\n\t"
                 "pushl	$0x6000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x60000, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$28, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (msvrID), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword filesystem_delete(sdword __service, sdword objID)

{
  sdword __return;

  // [straight] sdword objID
  // [in] sdword objID
  // [onstack] sdword objID
  // [push] , sdword objID
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x60001, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword lockable_lock(sdword __service, sdword objID)

{
  sdword __return;

  // [straight] sdword objID
  // [in] sdword objID
  // [onstack] sdword objID
  // [push] , sdword objID
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x70000, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword lockable_unlock(sdword __service, sdword objID)

{
  sdword __return;

  // [straight] sdword objID
  // [in] sdword objID
  // [onstack] sdword objID
  // [push] , sdword objID
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x70001, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword memory_get_pagerid(sdword __service, sdword objID, sdword *pagerID)

{
  sdword __return;

  // [straight] sdword objID, sdword *pagerID
  // [in] sdword objID
  // [out] sdword *pagerID
  // [onstack] sdword *pagerID, sdword objID
  // [push] , sdword objID
  // [pop] , sdword *pagerID

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x80000, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*pagerID), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword memory_request_physical(sdword __service, sdword objID, sdword fpage)

{
  sdword __return;

  // [straight] sdword objID, sdword fpage
  // [in] sdword objID, sdword fpage
  // [onstack] sdword objID, sdword fpage
  // [push] , sdword objID, sdword fpage
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x80001, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (fpage), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword memory_unmap(sdword __service, sdword objID, sdword fpage)

{
  sdword __return;

  // [straight] sdword objID, sdword fpage
  // [in] sdword objID, sdword fpage
  // [onstack] sdword objID, sdword fpage
  // [push] , sdword objID, sdword fpage
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x80002, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (fpage), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword memory_attach(sdword __service, sdword objID, sdword taskID)

{
  sdword __return;

  // [straight] sdword objID, sdword taskID
  // [in] sdword objID, sdword taskID
  // [onstack] sdword objID, sdword taskID
  // [push] , sdword objID, sdword taskID
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x80003, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (taskID), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword memory_set_maxpages(sdword __service, sdword objID, sdword maxpages)

{
  sdword __return;

  // [straight] sdword objID, sdword maxpages
  // [in] sdword objID, sdword maxpages
  // [onstack] sdword objID, sdword maxpages
  // [push] , sdword objID, sdword maxpages
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x80004, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (maxpages), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword memory_get_mapped(sdword __service, sdword objID, sdword fpage, sdword *pages)

{
  sdword __return;

  // [straight] sdword objID, sdword fpage, sdword *pages
  // [in] sdword objID, sdword fpage
  // [out] sdword *pages
  // [onstack] sdword *pages, sdword objID, sdword fpage
  // [push] , sdword objID, sdword fpage
  // [pop] , sdword *pages

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x80005, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*pages), "=D" (dummy)
                 : "S" (__service), "D" (fpage), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword buffer_set_size(sdword __service, sdword objID, sdword size)

{
  sdword __return;

  // [straight] sdword objID, sdword size
  // [in] sdword objID, sdword size
  // [onstack] sdword objID, sdword size
  // [push] , sdword objID, sdword size
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x90000, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (size), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword buffer_get_size(sdword __service, sdword objID, sdword *size)

{
  sdword __return;

  // [straight] sdword objID, sdword *size
  // [in] sdword objID
  // [out] sdword *size
  // [onstack] sdword *size, sdword objID
  // [push] , sdword objID
  // [pop] , sdword *size

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x90001, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (*size), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword buffer_map_to(sdword __service, sdword objID, sdword fpage, sdword rights)

{
  sdword __return;

  // [straight] sdword objID, sdword fpage, sdword rights
  // [in] sdword objID, sdword fpage, sdword rights
  // [onstack] sdword objID, sdword fpage, sdword rights
  // [push] , sdword objID, sdword fpage, sdword rights
  // [pop] 

  int dummy;

  asm volatile ( "pushl  %0			\n\t" : : "g" (rights));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x8000			\n\t"
                 "pushl	$0x6000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x90002, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$28, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (fpage), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword buffer_unmap(sdword __service, sdword objID, sdword fpage, sdword rights)

{
  sdword __return;

  // [straight] sdword objID, sdword fpage, sdword rights
  // [in] sdword objID, sdword fpage, sdword rights
  // [onstack] sdword objID, sdword fpage, sdword rights
  // [push] , sdword objID, sdword fpage, sdword rights
  // [pop] 

  int dummy;

  asm volatile ( "pushl  %0			\n\t" : : "g" (rights));

  asm volatile (
                 "sub	$12, %%esp		\n\t"
                 "pushl	$0x8000			\n\t"
                 "pushl	$0x6000			\n\t"
                 "pushl	$0			\n\t"

                 "mov	%%esp, %%eax		\n\t"
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "mov	$0x90003, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"
                 "add	$28, %%esp		\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "D" (fpage), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

__inline__ extern sdword buffer_delete(sdword __service, sdword objID)

{
  sdword __return;

  // [straight] sdword objID
  // [in] sdword objID
  // [onstack] sdword objID
  // [push] , sdword objID
  // [pop] 

  int dummy;

  asm volatile (
                 "pushl	%%ebp			\n\t"
                 "xor	%%ebp, %%ebp		\n\t"
                 "xor	%%ecx, %%ecx		\n\t"
                 "xor	%%eax, %%eax		\n\t"
                 "mov	$0x90004, %%edx		\n\t"

                 "int	$0x30			\n\t"

                 "popl	%%ebp			\n\t"

                 : "=S" (dummy), "=d" (__return), "=b" (dummy), "=D" (dummy)
                 : "S" (__service), "b" (objID)
                 : "%eax", "%ecx"
               );
  
  return __return;
}

#endif
