                 WHAT'S NEW IN IDL4 1.1.0 - 26th Oct 2006
                 ========================================

This is the latest development version of IDL4. Please send bug reports
and suggestions for new features to haeberlen@ira.uka.de.

New releases are announced on the IDL4 mailing list. You can subscribe 
to this list at http://lists.ira.uka.de/mailman/listinfo/idl4/.

Changes in 1.1.0
----------------
  
  1) Added word, signed_word, and threadid types
  2) Implemented automatic type conversion for 64/32-bit interaction
  3) Fixed some crashes on invalid input (list of strings, list of lists, ...)
  4) CORBA_alloc may destroy buffer registers now
  5) User-defined handle is not touched any more, using thread word 0 instead
  6) Fixed Object type in IDL files.

Changes in 1.0.3
----------------

  1) Fixed various small problems with 64-bit platforms
  2) Fixed compile problem with yacc

Changes in 1.0.2
----------------
  
  1) Fixed Pistachio IPC call
  2) Fixed gcc 3.3.2 complaints about union pointers
  3) Fixed kernel protocols on 64-bit platforms

Changes in 1.0.1
----------------

  1) Do not use -ffastcall by default
  2) Added slowcall to V4/IA32 backend
  3) Improved C++ frontend

Changes in 1.0.0
----------------

  1) Co-release with Pistachio
  2) Fixed: Use proper bindings when in C mode

Changes in 0.9.8
----------------

  1) Added reply stubs
  2) Added pre-call and post-call debug options
  3) Added support for implicit handles
  4) Fixed: Interface types did not work for aggregate members
  5) Fixed: Overlapping buffers in V4 memory messages
  6) Fixed: Empty sequences generate false positives in test suite
  7) Fixed: Preallocated output buffers do not work with V4 backend
  8) Fixed: Build problems with some platforms in the test suite

Changes in 0.9.7
----------------

  1) Added support for V4 memory messages
  2) Added idl4-config script
  3) Added version check for header files
  4) Added support for sigma0 RPC protocol
  5) More test cases for V4 string transfer
  6) C++ type import can now handle forward declarations
  7) Adapted test suite to new Pistachio user build process
  8) Fixed: Problems with Generic V4 backend
  9) Fixed: V4 backend does not deliver exception code
 10) Fixed: Broken code for large fixed chunks in V4

Changes in 0.9.6
----------------

  1) New -floop-only flag to generate server loops only
  2) Improved support for V4 string items
  3) Fixed: Build process does not install headers correctly
  4) Fixed: Test suite uses != for comparing threadIDs

Changes in 0.9.5
----------------

  1) Added support for object types
  2) Added reference types and pointers
  3) Extended test suite with better support for other platforms
  4) New -w flag for setting the word size (replaces -dplatform)
  5) Fixed: Missing cast in conditional expressions
  6) Fixed: Bug in server loops with kernel messages and one user message

Changes in 0.9.4
----------------
 
  1) Truly generic backends for X0 and V2
  2) Improved example architecture
  3) Fixed: GCC complains about uninitialized variables
  4) Fixed: Client allocates strings even when exception is received

Changes in 0.9.3
----------------

  1) New option for changing backend language (C, C++)
  2) Fixed some problems with standard C output
  3) Support oneway attribute for V4 backend
  4) Added support for V4 interrupt messages
  5) Fixed: Methods with out fpages cannot raise exceptions

Changes in 0.9.2
----------------

  1) Added V4 pagefault as kernel message
  2) Added support for input/output translations
  3) New option for changing system include directory
  4) Use generic types in server loops
  5) Better support for preprocessor magic
  6) Moved custom includes from template to header files
  7) Fixed: Import of zero-length arrays in headers
  8) Fixed: Function pointers in structs cause import to fail

Changes in 0.9.1
----------------

  1) Added support for register packing
  2) New V4 backend
  3) Visual debugging

Changes in 0.9.0
----------------

  1) Automake-based build process (thanks, Espen!)
  2) Added support for preallocated output buffers
  3) Fixed: Local calls generated for standard Hazelnut kernel
  4) Fixed: Compiler crashes on invalid struct specification
  5) Fixed: Constant names not scoped
  6) Fixed: Unconditional definition for enums
  7) Fixed: Compile problems with inlined server loops

Changes in 0.8.4
----------------

  1) Added sequence data type
  2) Improved function ID assignment
  3) Client stubs are defined conditionally
  4) Fixed: Build problems with FreeBSD
  5) Fixed: Some problems with gcc 3.0.4
  6) Fixed: Send dope collides with string dopes
  7) Fixed: Broken references in lipc server stubs
  8) Fixed: Function ID conflict in inherited operations

Changes in 0.8.3
----------------

  1) Added portable fpage data type
  2) Added support for input fpages
  3) Added more documentation
  4) Removed base_is attribute
  5) Improved server-side performance
  6) Fixed: Various build problems on non-Linux platforms
  7) Fixed: Out fpages collide with input data

Changes in 0.8.2
----------------

  1) Added fiasco (V2) compatible backend
  2) Added const qualifier to input parameters
  3) Added pass-through options for preprocessor
  4) Added option to select preprocessor
  5) Test suite runs in two different address spaces
  6) Many improvements in C++ frontend
  7) Fixed: Incorrect parsing of hex constants
  8) Fixed: Register-only map receive
  9) Fixed: Hard-wired registers in X0 backend
 10) Fixed: Alignment of output string sizes

Changes in 0.8.1
----------------

  1) Added ChacmOS as example code
  2) Added multi-interface server loops

Changes in 0.8.0
----------------
 
  1) Added basic V4 support
  2) Added DCE-style arrays
  3) New IA32 test suite framework
  4) Released at www.l4ka.org
  5) Fixed: Incompatibility with bison 1.34
  6) Fixed: Some problems with gcc 3.0 

Changes in 0.7.9
----------------

  1) Added basic DCE support
  2) Added DCE-style unions
  3) Improved C++ parser

Changes in 0.7.8
----------------

  1) Added enumerations
  2) Added sequences
  3) Added floating point types
  4) Added bitfields
  5) Changed 'id' attribute to 'uuid'

Changes in 0.7.7
----------------
  
  1) Added exceptions
  2) Improved server loop
  3) Fixed: Misaligned string dopes
  4) Fixed: Large input messages collide with output strings

Changes in 0.7.6
----------------

  1) Added unbounded strings
  2) Added string copybreak
  3) Improved string buffer allocation
  4) Improved function ID assignment
  5) Fixed: Incorrect size dopes
  6) Fixed: Buffering of output registers
  7) Fixed: Marshalling of complex return values

Changes in 0.7.5
----------------

  1) Added quick reference manual
  2) Added memory leak detection
  3) Added -fomit-frame-pointer command line option
  4) Added support for array members in structs
  5) Test suite can now detect memory leaks
  6) Fixed: Oneway functions in x0/generic
  7) Fixed: Temporary buffer overlap on server side
  8) Fixed: Memory leak in inout string handling

Changes in 0.7.4
----------------

  1) Support for pass-through preprocessor options
  2) Correctly dereference string aliases
  3) New attributes: base_is, noxfer
  4) Added support for flexpages (out only)
  5) Adapted for strict C++ type checking
  6) Fixed: Incorrect function IDs for inherited operations
  7) Fixed: Symbol table not flushed after header import
  8) Fixed: Superfluous indirections in string aliases
  9) Fixed: Missing cast in server input constraints

=====================================================================

If you think you have found a bug, please email a report to 
haeberlen@ira.uka.de and include all details necessary to 
reproduce the problem, such as input files or command line options.
